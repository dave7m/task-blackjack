<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="Player.java"><package>package <name>model</name>;</package>


<import>import <name><name>exception</name><operator>.</operator><name>InvalidMoneyAmountException</name></name>;</import>

<class><specifier>public</specifier> class <name>Player</name> <super_list><extends>extends <super><name>Person</name></super></extends></super_list><block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Wallet</name></type> <name>wallet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Bet</name></type> <name>bet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>playerNumber</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Player</name><parameter_list>()</parameter_list><block>{<block_content>
        <expr_stmt><expr><name>wallet</name> <operator>=</operator> <operator>new</operator> <call><name>Wallet</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * @return the balance of the player's wallet
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>balance</name><parameter_list>()</parameter_list><block>{<block_content>
        <return>return <expr><call><name><name>wallet</name><operator>.</operator><name>getAmount</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * withdraws a certain amount of money from the player's wallet
     * @param amount: int
     * @pre amount &gt;= 0
     * @throws InvalidMoneyAmountException: if not enough money or invalid amount
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>withdraw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>amount</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidMoneyAmountException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>withdraw</name></name><argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Adds a certain amount of money to the Player's wallet. If trying to add a negative number, it ends the program
     * @param amount: integer, should be positive
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>receiveMoney</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>amount</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidMoneyAmountException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Converts an array of all possible hand values to an appropriate String
     *
     * @return String
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getAllHandValues</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// The returned array's length is either 1 value or 2 values. Does not count an ace as 11 if it busts the hand,</comment>
        <comment type="line">// only as 1. hand.getAllValues() returns an array of possible hand values. E.g. having an EIGHT and an ACE</comment>
        <comment type="line">// results in [9, 19] (8+1 and 8+11), having an EIGHT and a NINE results in [17] (8+9).</comment>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>allValues</name> <init>= <expr><call><name><name>hand</name><operator>.</operator><name>getAllValues</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>stringBuilder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>stringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>stringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>allValues</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name><name>allValues</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>stringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>stringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>allValues</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>stringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="string">" "</literal><operator>.</operator><call><name>repeat</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>-</operator> <call><name><name>stringBuilder</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name>stringBuilder</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return Bet: current bet
     */</comment>
    <function><type><specifier>public</specifier> <name>Bet</name></type> <name>getBet</name><parameter_list>()</parameter_list><block>{<block_content><return>return <expr><name>bet</name></expr>;</return></block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * allows setting amount of current bet
     * @param bet: Bet with value of current bet
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBet</name><parameter_list>(<parameter><decl><type><name>Bet</name></type> <name>bet</name></decl></parameter>)</parameter_list><block>{<block_content><expr_stmt><expr><name><name>this</name><operator>.</operator><name>bet</name></name> <operator>=</operator> <name>bet</name></expr>;</expr_stmt></block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * allows setting amount of current bet to entire amount of money that the player has
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBetAllIn</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bet</name></name> <operator>=</operator> <operator>new</operator> <call><name>Bet</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>wallet</name><operator>.</operator><name>getAmount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return current playerNumber
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPlayerNumber</name><parameter_list>()</parameter_list><block>{<block_content><return>return <expr><name>playerNumber</name></expr>;</return></block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * assigns a new number to a player
     * @param newPlayerNumber: integer
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPlayerNumber</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newPlayerNumber</name></decl></parameter>)</parameter_list><block>{<block_content><expr_stmt><expr><name><name>this</name><operator>.</operator><name>playerNumber</name></name> <operator>=</operator> <name>newPlayerNumber</name></expr>;</expr_stmt></block_content>}</block></function>
}</block></class>
</unit>
