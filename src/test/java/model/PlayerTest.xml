<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="PlayerTest.java"><package>package <name>model</name>;</package>

<import>import <name><name>exception</name><operator>.</operator><name>InvalidMoneyAmountException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>BeforeEach</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Test</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>jupiter</name><operator>.</operator><name>api</name><operator>.</operator><name>Assertions</name><operator>.</operator><name>assertThrows</name></name>;</import>

<class>class <name>PlayerTest</name> <block>{
    <decl_stmt><decl><type><name>Player</name></type> <name>aPlayer</name></decl>;</decl_stmt>

    <function><annotation>@<name>BeforeEach</name></annotation>
    <type><name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>aPlayer</name> <operator>=</operator> <operator>new</operator> <call><name>Player</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>aPlayer</name><operator>.</operator><name>addCardToHand</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Card</name><argument_list>(<argument><expr><name><name>Rank</name><operator>.</operator><name>KING</name></name></expr></argument>, <argument><expr><name><name>Suit</name><operator>.</operator><name>DIAMOND</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    <function><annotation>@<name>Test</name></annotation>
    <type><name>void</name></type> <name>withdrawValidAmount</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InvalidMoneyAmountException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>aPlayer</name><operator>.</operator><name>withdraw</name></name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><call><name><name>aPlayer</name><operator>.</operator><name>balance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><name>void</name></type> <name>withdrawTooMuch</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>assertThrows</name><argument_list>(<argument><expr><name><name>InvalidMoneyAmountException</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>aPlayer</name><operator>.</operator><name>withdraw</name></name><argument_list>(<argument><expr><literal type="number">101</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <type><name>void</name></type> <name>withdraw0</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>assertThrows</name><argument_list>(<argument><expr><name><name>InvalidMoneyAmountException</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>aPlayer</name><operator>.</operator><name>withdraw</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class></unit>
